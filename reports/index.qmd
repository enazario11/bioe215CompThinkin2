---
title: "CompThinking2"
format: html
editor: visual
---

## Where did birds hatch

```{r}
library(tidyverse)

# Generate sample data
# Sightings of Black Oystercatcher chicks at Santa Cruz beaches
beaches <- c("Cowell's", "Steamer Lane", "Natural Bridges", "Mitchell's", "Main")
# blue, green, black, white, yellow
band_colors <- c("B", "G", "K", "W", "Y") 
# Surveys took place weekly in the summer of 2023
surveys <- seq(as.Date("2023-06-01"), as.Date("2023-08-31"), by = 7)

# Setting the "seed" forces randomized functions (like sample()) to generate
# the same output
set.seed(1538)
# 3 band colors identify a bird. We want 12 birds.
birds <- paste0(
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE)
) %>% 
  unique() %>%
  head(12)

bloy_chicks <- tibble(
  # Randomly generate survey data
  beach = sample(beaches, size = 100, replace = TRUE),
  bird = sample(birds, size = 100, replace = TRUE),
  survey = sample(surveys, size = 100, replace = TRUE)
) %>% 
  # Remove duplicates (see ?distinct)
  distinct() %>% 
  # Sort by survey date and location
  arrange(survey, beach)
```

**Q1:** Because we set the seed, we will get the same 'random' output

**Q2:** Lines 18-24 take a random sample with 25 repetitions and is done with replacement. This is repeated three times, then only unique values are filtered, and the first 12 band combinations are kept

**Q3:** We generataed 100 random survey observations but only kept the distint observantions (removed the duplicates). After these were removed, we are only left with 95 survey observations.

## Without a custom function

**Q4:** Sort the pipelines in the correct order

```{r}
  # Find most frequent beach per bird
beach_freq <- bloy_chicks %>% 
  group_by(bird) %>% 
  count(bird, beach) %>% 
  filter(n == max(n)) %>% 
  ungroup()
  
  # Find first date for each bird+beach
beach_early <- bloy_chicks %>% 
  group_by(bird, beach) %>%
  summarize(earliest = min(survey), .groups = "drop")
 
  # Join the two conditions and retain most frequent beach, only earliest
hatch_beach <- beach_freq %>%  
  group_by(bird) %>% 
  left_join(beach_early, by = c("bird", "beach")) %>% 
  filter(earliest == min(earliest)) %>%
  sample_n(1) %>% # Randomly choose 1 row. See ?sample_n
  ungroup()


```

## With a custom function

```{r}
find_hatching_beach <- function(site, date) {
  # Start with a data frame (or tibble) of site and date for *one* bird
  bird_observations <- tibble(site, date)
  set.seed(1538) #set so that sample below always pick's the same beach if there is a tie in earliest arrival date
  
  # Use pipes and dplyr functions to find the hatching beach
  result <- bird_observations %>% 
    count(site) %>%
    filter(n == max(n)) %>%
    group_by(site) %>%
    summarise(earliest = min(date)) %>%
    ungroup() %>%
    filter(earliest == min(earliest)) %>%
    sample_n(1)

  # result should end up as a data frame with one row for the hatching beach
  return(result$site) # return the hatching beach
}

# split-apply-combine
bloy_chicks %>% 
  group_by(bird) %>% 
  summarize(hatch_beach = find_hatching_beach(beach, survey))
```

**Q5:** I will use beach for site and survey for date

**Q6:** The hatching beach site for bird YWG is Main and for WYB is Cowell's

# Bonus

```{r}
move_report_output <- function(quarto_doc){
 file.rename(dir(quarto_doc, pattern = ".html"), "docs/index.html") 
}

move_report_output("reports/")
```

Might have gotten close but was using reports directory as the input rather than the quarto doc name. Couldn't get this to work but might be on the right track.
